<style lang="less">
    page {
        background-color: #FFFFFF;
    }

    .avatar-wrap {
        position: relative;
        margin-top: 10px;
    }

    .avatar {
        width: 50px;
        height: 50px;
        display: block;
        border-radius: 50%;
    }

    .topic-title {
        padding: 15px;
    }
</style>
<template>
    <view class="page">
        <view class="page__bd">
            <view class="weui-cells weui-cells_after-title">
                <navigator class="weui-cell" url="/pages/users/show?id={{ topic.user.id }}" open-type="redirect">
                    <view class="weui-cell__hd avatar-wrap">
                        <image class="avatar" src="{{ topic.user.avatar }}"/>
                    </view>
                    <view class="weui-cell__bd">
                        <view>{{ topic.user.name }}</view>
                        <view class="page__desc">{{ topic.user.introduction }}</view>
                    </view>

                    <!--向右的箭头-->
                    <view class="weui-cell__ft weui-cell__ft_in-access"></view>
                </navigator>
            </view>
            <view class="topic-title">
                <view class="page__title">{{ topic.title }}</view>
                <view class="weui-media-box__info topic-info">
                    <view class="weui-media-box__info__meta">{{ topic.category.name }} •</view>
                    <view class="weui-media-box__info__meta">{{ topic.updated_at_diff }} •</view>
                    <view class="weui-media-box__info__meta">{{ topic.reply_count }} 次阅读</view>
                </view>
            </view>
            <view class="weui-article">
                <rich-text nodes="{{ topic.body }}" bindtap="tap"></rich-text>
                <button wx:if="{{ canDelete }}" @tap="deleteTopic" class="weui-btn mini-btn" type="default" size="mini">
                    删除
                </button>
            </view>
        </view>
    </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '@/utils/api'
  import util from '@/utils/util'

  export default class TopicShow extends wepy.page {
    config = {
      navigationBarTitleText: '话题详情'
    }
    data = {
      topic: null
    }
    // 计算的属性
    computed = {
      // 是否可以删除话题
      canDelete() {
        if (!this.topic || !this.user) {
          return false
        }
        return this.topic.user.id === this.user.id
      }
    }

    methods = {
      async deleteTopic() {
        let res = await wepy.showModal({
          title: '确认删除',
          content: '您确认删除该话题吗',
          confirmText: '删除',
          cancelText: '取消'
        })

        // 点击取消返回
        if (!res.confirm) {
          return false
        }

        let deleteResponse = await api.authRequest({
          url: 'topics/' + this.topic.id,
          method: 'DELETE'
        })

        if (deleteResponse.statusCode === 204) {
          wepy.showToast({
            title: '删除成功',
            icon: 'success'
          })
        }

        // 设置全局变量，控制列表刷新
        let pages = this.getCurrentPages()
        // 如果有上一页
        if (pages.length > 1) {
          // 检查打开的页面，如果是话题列表页面就记录下来
          let refreshPages = []
          let tapPages = [
            'pages/topics/index',
            'pages/topics/userIndex'
          ]
          pages.forEach((page) => {
            // 已打开的页面中包含 话题列表 或 用户的话题列表
            if (tapPages.indexOf(page.route) !== -1) {
              refreshPages.push(page.route)
            }
          })
          this.$parent.globalData.refreshPages = this.$parent.globalData.refreshPages.concat(refreshPages)
          this.$apply()
        }
        // 2 秒后返回上一页
        setTimeout(function() {
          wepy.navigateBack()
        }, 2000)
      }
    }
    // 获取话题数据
    async getTopic(id) {
      try {
        let topicResponse = await api.request({
          url: 'topics/' + id,
          data: {
            include: 'user,category'
          }
        })
        let topic = topicResponse.data
        topic.updated_at_diff = util.diffForHumans(topic.updated_at)

        this.topic = topic
        this.$apply()
      } catch (err) {
        api.showErrorModal(err)
      }
    }

    async onLoad(options) {
      this.getTopic(options.id)
      this.user = await this.$parent.getCurrentUser()
      this.$apply()
    }
  }
</script>
